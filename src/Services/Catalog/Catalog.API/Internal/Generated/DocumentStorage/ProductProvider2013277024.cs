// <auto-generated/>
#pragma warning disable
using Catalog.API.Models;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertProductOperation2013277024
    public class UpsertProductOperation2013277024 : Marten.Internal.Operations.StorageOperation<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Catalog.API.Models.Product _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertProductOperation2013277024(Catalog.API.Models.Product document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Catalog.API.Models.Product document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_product(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertProductOperation2013277024
    
    
    // START: InsertProductOperation2013277024
    public class InsertProductOperation2013277024 : Marten.Internal.Operations.StorageOperation<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Catalog.API.Models.Product _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertProductOperation2013277024(Catalog.API.Models.Product document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Catalog.API.Models.Product document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_product(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertProductOperation2013277024
    
    
    // START: UpdateProductOperation2013277024
    public class UpdateProductOperation2013277024 : Marten.Internal.Operations.StorageOperation<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Catalog.API.Models.Product _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateProductOperation2013277024(Catalog.API.Models.Product document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Catalog.API.Models.Product document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_product(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateProductOperation2013277024
    
    
    // START: QueryOnlyProductSelector2013277024
    public class QueryOnlyProductSelector2013277024 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Catalog.API.Models.Product>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyProductSelector2013277024(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Catalog.API.Models.Product Resolve(System.Data.Common.DbDataReader reader)
        {

            Catalog.API.Models.Product document;
            document = _serializer.FromJson<Catalog.API.Models.Product>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<Catalog.API.Models.Product> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            Catalog.API.Models.Product document;
            document = await _serializer.FromJsonAsync<Catalog.API.Models.Product>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyProductSelector2013277024
    
    
    // START: LightweightProductSelector2013277024
    public class LightweightProductSelector2013277024 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<Catalog.API.Models.Product, System.Guid>, Marten.Linq.Selectors.ISelector<Catalog.API.Models.Product>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightProductSelector2013277024(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Catalog.API.Models.Product Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            Catalog.API.Models.Product document;
            document = _serializer.FromJson<Catalog.API.Models.Product>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Catalog.API.Models.Product> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            Catalog.API.Models.Product document;
            document = await _serializer.FromJsonAsync<Catalog.API.Models.Product>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightProductSelector2013277024
    
    
    // START: IdentityMapProductSelector2013277024
    public class IdentityMapProductSelector2013277024 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<Catalog.API.Models.Product, System.Guid>, Marten.Linq.Selectors.ISelector<Catalog.API.Models.Product>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapProductSelector2013277024(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Catalog.API.Models.Product Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Catalog.API.Models.Product document;
            document = _serializer.FromJson<Catalog.API.Models.Product>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<Catalog.API.Models.Product> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Catalog.API.Models.Product document;
            document = await _serializer.FromJsonAsync<Catalog.API.Models.Product>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapProductSelector2013277024
    
    
    // START: DirtyTrackingProductSelector2013277024
    public class DirtyTrackingProductSelector2013277024 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<Catalog.API.Models.Product, System.Guid>, Marten.Linq.Selectors.ISelector<Catalog.API.Models.Product>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingProductSelector2013277024(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Catalog.API.Models.Product Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Catalog.API.Models.Product document;
            document = _serializer.FromJson<Catalog.API.Models.Product>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Catalog.API.Models.Product> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Catalog.API.Models.Product document;
            document = await _serializer.FromJsonAsync<Catalog.API.Models.Product>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingProductSelector2013277024
    
    
    // START: QueryOnlyProductDocumentStorage2013277024
    public class QueryOnlyProductDocumentStorage2013277024 : Marten.Internal.Storage.QueryOnlyDocumentStorage<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyProductDocumentStorage2013277024(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Catalog.API.Models.Product document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Catalog.API.Models.Product document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyProductSelector2013277024(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyProductDocumentStorage2013277024
    
    
    // START: LightweightProductDocumentStorage2013277024
    public class LightweightProductDocumentStorage2013277024 : Marten.Internal.Storage.LightweightDocumentStorage<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightProductDocumentStorage2013277024(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Catalog.API.Models.Product document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Catalog.API.Models.Product document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightProductSelector2013277024(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightProductDocumentStorage2013277024
    
    
    // START: IdentityMapProductDocumentStorage2013277024
    public class IdentityMapProductDocumentStorage2013277024 : Marten.Internal.Storage.IdentityMapDocumentStorage<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapProductDocumentStorage2013277024(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Catalog.API.Models.Product document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Catalog.API.Models.Product document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapProductSelector2013277024(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapProductDocumentStorage2013277024
    
    
    // START: DirtyTrackingProductDocumentStorage2013277024
    public class DirtyTrackingProductDocumentStorage2013277024 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingProductDocumentStorage2013277024(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Catalog.API.Models.Product document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertProductOperation2013277024
            (
                document, Identity(document),
                session.Versions.ForType<Catalog.API.Models.Product, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Catalog.API.Models.Product document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Catalog.API.Models.Product document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingProductSelector2013277024(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingProductDocumentStorage2013277024
    
    
    // START: ProductBulkLoader2013277024
    public class ProductBulkLoader2013277024 : Marten.Internal.CodeGeneration.BulkLoader<Catalog.API.Models.Product, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<Catalog.API.Models.Product, System.Guid> _storage;

        public ProductBulkLoader2013277024(Marten.Internal.Storage.IDocumentStorage<Catalog.API.Models.Product, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_product(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_product_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_product (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_product_temp.\"id\", mt_doc_product_temp.\"data\", mt_doc_product_temp.\"mt_version\", mt_doc_product_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_product_temp left join public.mt_doc_product on mt_doc_product_temp.id = public.mt_doc_product.id where public.mt_doc_product.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_product target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_product_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_product_temp (like public.mt_doc_product including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, Catalog.API.Models.Product document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, Catalog.API.Models.Product document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: ProductBulkLoader2013277024
    
    
    // START: ProductProvider2013277024
    public class ProductProvider2013277024 : Marten.Internal.Storage.DocumentProvider<Catalog.API.Models.Product>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ProductProvider2013277024(Marten.Schema.DocumentMapping mapping) : base(new ProductBulkLoader2013277024(new QueryOnlyProductDocumentStorage2013277024(mapping)), new QueryOnlyProductDocumentStorage2013277024(mapping), new LightweightProductDocumentStorage2013277024(mapping), new IdentityMapProductDocumentStorage2013277024(mapping), new DirtyTrackingProductDocumentStorage2013277024(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: ProductProvider2013277024
    
    
}

